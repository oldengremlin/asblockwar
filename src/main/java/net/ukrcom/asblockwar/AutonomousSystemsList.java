/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package net.ukrcom.asblockwar;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;

/**
 *
 * @author olden
 */
public class AutonomousSystemsList extends javax.swing.JInternalFrame {

    /**
     * Creates new form AutonomousSystemsList
     *
     * @param config
     */
    public AutonomousSystemsList(Config config) {
        this.config = config;
        initComponents();

        this.selectedFile = new File(this.config.getListFile());
        if (this.selectedFile.canRead()) {
            ReadAutonomousSystemsList();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabelAutonomousSystemsList = new javax.swing.JLabel();
        jScrollPaneAutonomousSystemsList = new javax.swing.JScrollPane();
        jTextAreaAutonomousSystemsList = new javax.swing.JTextArea();
        jLabelAutonomousSystemsOrigins = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelAutonomousSystemsRoutes = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBarAutonomousSystemsList = new javax.swing.JMenuBar();
        jFileAutonomousSystemsList = new javax.swing.JMenu();
        jOpenAutonomousSystemsList = new javax.swing.JMenuItem();
        jCloseAutonomousSystemsList = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Список автономних систем");
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabelAutonomousSystemsList.setText("Список автономних систем");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        getContentPane().add(jLabelAutonomousSystemsList, gridBagConstraints);

        jScrollPaneAutonomousSystemsList.setViewportView(jTextAreaAutonomousSystemsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        getContentPane().add(jScrollPaneAutonomousSystemsList, gridBagConstraints);

        jLabelAutonomousSystemsOrigins.setText("Маршрути автономних систем");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        getContentPane().add(jLabelAutonomousSystemsOrigins, gridBagConstraints);

        jTextArea1.setEditable(false);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        getContentPane().add(jScrollPane2, gridBagConstraints);

        jLabelAutonomousSystemsRoutes.setText("Зміни до блокувань маршрутів");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 2);
        getContentPane().add(jLabelAutonomousSystemsRoutes, gridBagConstraints);

        jTextArea2.setEditable(false);
        jTextArea2.setEnabled(false);
        jScrollPane3.setViewportView(jTextArea2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 2);
        getContentPane().add(jScrollPane3, gridBagConstraints);

        jFileAutonomousSystemsList.setText("Файл");

        jOpenAutonomousSystemsList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jOpenAutonomousSystemsList.setText("Зчитати список");
        jOpenAutonomousSystemsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenAutonomousSystemsListActionPerformed(evt);
            }
        });
        jFileAutonomousSystemsList.add(jOpenAutonomousSystemsList);

        jCloseAutonomousSystemsList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jCloseAutonomousSystemsList.setText("Закрити");
        jCloseAutonomousSystemsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCloseAutonomousSystemsListActionPerformed(evt);
            }
        });
        jFileAutonomousSystemsList.add(jCloseAutonomousSystemsList);

        jMenuBarAutonomousSystemsList.add(jFileAutonomousSystemsList);

        setJMenuBar(jMenuBarAutonomousSystemsList);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCloseAutonomousSystemsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCloseAutonomousSystemsListActionPerformed
        this.dispose();
    }//GEN-LAST:event_jCloseAutonomousSystemsListActionPerformed

    private void jOpenAutonomousSystemsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenAutonomousSystemsListActionPerformed
        if (this.jFileChooser == null) {
            this.jFileChooser = new JFileChooser();
            this.jFileChooser.setCurrentDirectory(new File("."));
            this.jFileChooser.setSelectedFile(new File(this.config.getListFile()));

            this.jFileChooser.setMultiSelectionEnabled(false);
            this.jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        }

        int result = this.jFileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {

            this.selectedFile = this.jFileChooser.getSelectedFile();
            if (this.selectedFile.canRead()) {
                ReadAutonomousSystemsList();
            }

        }
    }//GEN-LAST:event_jOpenAutonomousSystemsListActionPerformed

    private void ReadAutonomousSystemsList() {
        long count = 0;
        try {
            count = Files.lines(Path.of(this.selectedFile.getPath())).count();
        } catch (IOException ex) {
            Logger.getLogger(AutonomousSystemsList.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (this.progressDialog == null) {
            this.progressDialog = new progressDialog();
        }
        this.progressDialog.setLocationRelativeTo(this);
        WorkerOpenAutonomousSystemsList((int) count).execute();
        this.progressDialog.setVisible(true);
    }

    private SwingWorker WorkerOpenAutonomousSystemsList(int totalLines) {
        return new SwingWorker<Void, Integer>() {
            int counter = 0;
            int progressPublish = config.getProgressPublish();
            boolean progressSleep = config.getProgressSleep();

            @Override
            protected Void doInBackground() throws Exception {

                try (Stream<String> lines = Files.lines(Path.of(selectedFile.getPath()))) {
                    jTextAreaAutonomousSystemsList.setText("");
                    lines.map(String::trim) // прибрати зайві пробіли
                            .filter(line -> !line.isEmpty()) // пропустити порожні рядки
                            .filter(line -> !line.startsWith("#")) // пропустити коментарі #
                            .filter(line -> !line.startsWith("//")) // пропустити коментарі //
                            .forEach(s -> {
                                if (counter % progressPublish == 0 || counter >= totalLines) {
                                    publish((counter * progressPublish) / totalLines); // Оновлення прогресу
                                }
                                jTextAreaAutonomousSystemsList.append(s);
                                jTextAreaAutonomousSystemsList.append("\n");
                                counter++;
                                if (progressSleep) {
                                    try {
                                        Thread.sleep(1);
                                    } catch (InterruptedException ex) {
                                        Logger.getLogger(AutonomousSystemsList.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            });
                    jTextAreaAutonomousSystemsList.revalidate();
                    jTextAreaAutonomousSystemsList.repaint();
                } catch (IOException ex) {
                    Logger.getLogger(AutonomousSystemsList.class.getName()).log(Level.SEVERE, null, ex);
                }

                return null;
            }

            @Override
            protected void process(List<Integer> chunks) {
                // Оновлення прогрес-бару
                if (!chunks.isEmpty()) {
                    progressDialog.jProgressBar.setValue(chunks.get(chunks.size() - 1));
                }
            }

            @Override
            protected void done() {
                jTextAreaAutonomousSystemsList.revalidate();
                jTextAreaAutonomousSystemsList.repaint();
                progressDialog.dispose(); // Закриваємо діалог
            }
        };
    }

    private final Config config;
    protected JFileChooser jFileChooser;
    protected progressDialog progressDialog;
    protected File selectedFile;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jCloseAutonomousSystemsList;
    private javax.swing.JMenu jFileAutonomousSystemsList;
    private javax.swing.JLabel jLabelAutonomousSystemsList;
    private javax.swing.JLabel jLabelAutonomousSystemsOrigins;
    private javax.swing.JLabel jLabelAutonomousSystemsRoutes;
    private javax.swing.JMenuBar jMenuBarAutonomousSystemsList;
    private javax.swing.JMenuItem jOpenAutonomousSystemsList;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneAutonomousSystemsList;
    protected javax.swing.JTextArea jTextArea1;
    protected javax.swing.JTextArea jTextArea2;
    protected javax.swing.JTextArea jTextAreaAutonomousSystemsList;
    // End of variables declaration//GEN-END:variables
}
